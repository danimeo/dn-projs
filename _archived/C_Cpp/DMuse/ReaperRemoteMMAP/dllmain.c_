#include "dll.h"
#include <windows.h>
#include <stdlib.h>
#include <string.h>

int mem_size = 10240, n_channels = 10;
HANDLE *hMap_send = NULL, *hMap_recv = NULL;
char **addr_send = NULL, * *addr_recv = NULL;

DLLEXPORT void PushMsg(int chan, char *msg, int n) {
	int i, n2, j = 0;
	n2 = n + 4;
	for (i = -4; i < n2; i++) {
		if (i < 0) {
			*(*(addr_send + chan) + j++) = '\x02';
		} else if (i >= n) {
			*(*(addr_send + chan) + j++) = '\x03';
		} else {
			*(*(addr_send + chan) + j++) = *(msg + i);
		}
	}
}

DLLEXPORT int GetMsg(int chan, char *msg) {
	int i, x0 = 0, x1 = 0, get = 0, n = 0;
	char c;
	for (i = 0; i < mem_size; i++) {
		c = *(*(addr_recv + chan) + i);
		if (c == 0x02) {
			x0++;
			if (x0 == 4) {
				get = 1;
			}
			continue;
		} else {
			x0 = 0;
		}
		if (c == 0x03) {
			x1++;
			if (x1 == 4) {
				get = 0;
			}
			continue;
		} else {
			x1 = 0;
		}
		if (get) {
			*(msg + n++) = c;
		}
	}
	*(msg + n) = '\0';
	return n;
}

DLLEXPORT void ClearSend(int chan) {
	int i;
	for (i = 0; i < mem_size; i++) {
		*(*(addr_send + chan) + i) = 0;
	}
}

DLLEXPORT void ClearRecv(int chan) {
	int i;
	for (i = 0; i < mem_size; i++) {
		*(*(addr_recv + chan) + i) = 0;
	}
}

DLLEXPORT void Clear(int chan) {
	int i;
	for (i = 0; i < mem_size; i++) {
		*(*(addr_send + chan) + i) = 0;
	}
	for (i = 0; i < mem_size; i++) {
		*(*(addr_recv + chan) + i) = 0;
	}
}

DLLEXPORT void Listen(char *send_tagname, char *recv_tagname, int m_size, int n_chan) {
	hMap_send = (HANDLE *) calloc(sizeof(HANDLE), n_channels);
	hMap_recv = (HANDLE *) calloc(sizeof(HANDLE), n_channels);
	addr_send = (char **) calloc(sizeof(char *), n_channels);
	addr_recv = (char **) calloc(sizeof(char *), n_channels);
	int i;
	char send_tag[128], recv_tag[128], buff[8];
	for (i = 0; i < n_channels; i++) {
		if (*(hMap_send + i) != NULL && *(hMap_recv + i) != NULL) {
			return;
		}
		if (*(addr_send + i) != NULL && *(addr_recv + i) != NULL) {
			return;
		}
		mem_size = m_size;
		n_channels = n_chan;
		itoa(i, buff, 10);
		strcpy(send_tag, send_tagname);
		strcpy(recv_tag, recv_tagname);
		strcat(send_tag, buff);
		strcat(recv_tag, buff);
		*(hMap_send + i) = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, m_size, send_tag);
		*(hMap_recv + i) = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, m_size, recv_tag);
		if (hMap_send == NULL || hMap_recv == NULL) {
			CloseHandle(*(hMap_send + i));
			CloseHandle(*(hMap_recv + i));
			*(hMap_send + i) = NULL;
			*(hMap_recv + i) = NULL;
			return;
		}
		*(addr_send + i) = (char *) MapViewOfFile(*(hMap_send + i), FILE_MAP_ALL_ACCESS, 0, 0, mem_size);
		*(addr_recv + i) = (char *) MapViewOfFile(*(hMap_recv + i), FILE_MAP_ALL_ACCESS, 0, 0, mem_size);
		if (addr_send == NULL || addr_recv == NULL) {
			CloseHandle(*(hMap_send + i));
			CloseHandle(*(hMap_recv + i));
			return;
		}
	}
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
	switch (fdwReason) {
		case DLL_PROCESS_ATTACH:
			break;
		case DLL_PROCESS_DETACH:
			break;
		case DLL_THREAD_ATTACH:
			break;
		case DLL_THREAD_DETACH:
			break;
	}

	return TRUE;
}
